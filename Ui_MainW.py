# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'e:\My Projects\rocks_view\MainW.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
from PIL import Image
from PyQt5 import QtCore, QtGui, QtWidgets
from tqdm import trange
from palette import ReviseForm
from nets.inference_unet import UNET
from reconstruction.VisualModel import VisualModelWidget

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        self.absolute_FileList_seged = None
        self.absolute_FileList_pre = None
        MainWindow.resize(1400, 800)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        # 堆叠窗口，展示图片与修改图片
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setEnabled(True)
        self.stackedWidget.setObjectName("stackedWidget")
        self.horizontalLayout_2.addWidget(self.stackedWidget)

        self.widget_tools = QtWidgets.QWidget(self.centralwidget)
        self.widget_tools.setMinimumSize(QtCore.QSize(200, 0))
        self.widget_tools.setObjectName("widget_tools")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget_tools)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_now_img_id = QtWidgets.QLabel(self.widget_tools)
        self.label_now_img_id.setAlignment(QtCore.Qt.AlignCenter)
        self.label_now_img_id.setObjectName("label_now_img_id")
        self.verticalLayout.addWidget(self.label_now_img_id)
        self.pushButton_openfile = QtWidgets.QPushButton(self.widget_tools)
        self.pushButton_openfile.setObjectName("pushButton_openfile")
        self.verticalLayout.addWidget(self.pushButton_openfile)
        self.comboBox = QtWidgets.QComboBox(self.widget_tools)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.verticalLayout.addWidget(self.comboBox)
        self.pushButton_load_model = QtWidgets.QPushButton(self.widget_tools)
        self.pushButton_load_model.setObjectName("pushButton_load_model")
        self.verticalLayout.addWidget(self.pushButton_load_model)
        self.label_weight_path = QtWidgets.QLabel(self.widget_tools)
        #
        self.label_weight_path.setMaximumWidth(200)
        self.label_weight_path.setObjectName("label_weight_path")
        self.verticalLayout.addWidget(self.label_weight_path)
        self.checkBox = QtWidgets.QCheckBox(self.widget_tools)
        self.checkBox.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.checkBox.setAutoRepeatDelay(300)
        self.checkBox.setObjectName("checkBox")
        self.verticalLayout.addWidget(self.checkBox)
        self.pushButton_seg_imgs = QtWidgets.QPushButton(self.widget_tools)
        self.pushButton_seg_imgs.setObjectName("pushButton_seg_imgs")
        self.verticalLayout.addWidget(self.pushButton_seg_imgs)
        self.line = QtWidgets.QFrame(self.widget_tools)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout.addWidget(self.line)
        self.line_3 = QtWidgets.QFrame(self.widget_tools)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.verticalLayout.addWidget(self.line_3)
        self.pushButton_openfile_seged = QtWidgets.QPushButton(
            self.widget_tools)
        self.pushButton_openfile_seged.setObjectName(
            "pushButton_openfile_seged")
        self.verticalLayout.addWidget(self.pushButton_openfile_seged)
        self.pushButton_clear_stackedsidget = QtWidgets.QPushButton(self.widget_tools)
        self.pushButton_clear_stackedsidget.setObjectName("pushButton_clear_stackedsidget")
        self.pushButton_clear_stackedsidget.setText("清空窗口")
        self.verticalLayout.addWidget(self.pushButton_clear_stackedsidget)
        self.Button_pre_img = QtWidgets.QPushButton(self.widget_tools)
        self.Button_pre_img.setObjectName("Button_pre_img")
        self.verticalLayout.addWidget(self.Button_pre_img)
        self.Button_next_img = QtWidgets.QPushButton(self.widget_tools)
        self.Button_next_img.setObjectName("Button_next_img")
        self.verticalLayout.addWidget(self.Button_next_img)
        self.line_2 = QtWidgets.QFrame(self.widget_tools)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.verticalLayout.addWidget(self.line_2)
        self.line_4 = QtWidgets.QFrame(self.widget_tools)
        self.line_4.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.verticalLayout.addWidget(self.line_4)
        self.Button_resetnow = QtWidgets.QPushButton(self.widget_tools)
        self.Button_resetnow.setObjectName("Button_resetnow")
        self.verticalLayout.addWidget(self.Button_resetnow)
        self.label_pensize = QtWidgets.QLabel(self.widget_tools)
        self.label_pensize.setMaximumSize(QtCore.QSize(16777215, 50))
        self.label_pensize.setObjectName("label_pensize")
        self.verticalLayout.addWidget(self.label_pensize)
        self.spinBox_pensize = QtWidgets.QSpinBox(self.widget_tools)
        self.spinBox_pensize.setProperty("value", 2)
        self.spinBox_pensize.setObjectName("spinBox_pensize")
        self.verticalLayout.addWidget(self.spinBox_pensize)
        self.label_pencolor = QtWidgets.QLabel(self.widget_tools)
        self.label_pencolor.setMaximumSize(QtCore.QSize(16777215, 50))
        self.label_pencolor.setObjectName("label_pencolor")
        self.verticalLayout.addWidget(self.label_pencolor)

        self.comboBox_color = QtWidgets.QComboBox(self.widget_tools)
        self.comboBox_color.setObjectName("comboBox_color")
        self.comboBox_color.addItem(QtGui.QIcon("./res/black.jpeg"), '黑色')
        self.comboBox_color.addItem(QtGui.QIcon("./res/white.jpeg"), '白色')

        self.verticalLayout.addWidget(self.comboBox_color)

        self.line_3 = QtWidgets.QFrame(self.widget_tools)
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.verticalLayout.addWidget(self.line_3)
        self.pushButton_save_imgs = QtWidgets.QPushButton(self.widget_tools)
        self.pushButton_save_imgs.setObjectName("pushButton_save_imgs")
        self.verticalLayout.addWidget(self.pushButton_save_imgs)
        self.pushButton_3D_build = QtWidgets.QPushButton(self.widget_tools)
        self.pushButton_3D_build.setObjectName("pushButton_3D_build")
        self.verticalLayout.addWidget(self.pushButton_3D_build)
        spacerItem = QtWidgets.QSpacerItem(
            20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout_2.addWidget(self.widget_tools)
        self.horizontalLayout_4.addLayout(self.horizontalLayout_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action = QtWidgets.QAction(MainWindow)
        self.action.setObjectName("action")

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        self.SetAction(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_now_img_id.setText(_translate("MainWindow", "当前切片："))
        self.pushButton_openfile.setText(_translate("MainWindow", "导入砾石CT切片"))
        # TODO: 添加选择分割的网络模型功能，self.combobox
        self.comboBox.setItemText(0, _translate("MainWindow", "UNet"))
        self.comboBox.setItemText(1, _translate("MainWindow", "UNet++"))
        self.pushButton_load_model.setText(_translate("MainWindow", "载入模型权重"))
        self.checkBox.setText(_translate("MainWindow", "使用GPU加速"))
        self.pushButton_seg_imgs.setText(_translate("MainWindow", "分割砾石"))
        self.pushButton_openfile_seged.setText(
            _translate("MainWindow", "导入分割后图片"))
        self.Button_pre_img.setText(_translate("MainWindow", "上一张"))
        self.Button_next_img.setText(_translate("MainWindow", "下一张"))
        self.Button_resetnow.setText(_translate("MainWindow", "重置当前"))
        self.label_pensize.setText(_translate("MainWindow", "画笔粗细"))
        self.label_pencolor.setText(_translate("MainWindow", "画笔颜色"))
        self.pushButton_save_imgs.setText(_translate("MainWindow", "保存全部图片"))
        self.pushButton_3D_build.setText(_translate("MainWindow", "三维重建"))
        self.label_weight_path.setText(_translate("MainWindow", "权重路径："))
        self.action.setText(_translate("MainWindow", "导入原始CT切片"))



    def SetAction(self, MainWindow):
        """为控件添加功能"""
        self.pushButton_openfile.clicked.connect(
            lambda: self.Open_File_Pre(MainWindow))
        self.Button_next_img.clicked.connect(self.Action_next_page)
        self.Button_pre_img.clicked.connect(self.Action_pre_page)
        self.pushButton_load_model.clicked.connect(
            lambda: self.Action_Load_model(MainWindow))
        self.pushButton_seg_imgs.clicked.connect(self.Action_Seg_rocks)
        self.pushButton_openfile_seged.clicked.connect(
            lambda: self.Action_open_seged_imgs(MainWindow))
        self.pushButton_save_imgs.clicked.connect(
            lambda: self.Action_save_imgs(MainWindow))
        self.pushButton_3D_build.clicked.connect(
            lambda: self.Action_VisualModel(MainWindow))
        self.spinBox_pensize.valueChanged.connect(self.Action_ChangedPenSize)
        self.Button_resetnow.clicked.connect(self.Action_ResetImage)
        self.pushButton_clear_stackedsidget.clicked.connect(self.Action_clear_stackedwidget)

      
      
    def Action_clear_stackedwidget(self):
        """清空当前的窗口"""
        total_num = self.stackedWidget.count()
        for i in range(total_num - 1,-1,-1):  # 倒序循环
            page_widget = self.stackedWidget.widget(i)
            self.stackedWidget.removeWidget(page_widget)
            # page_widget.deleteLater() 
        
        # self.stackedWidget.setCurrentIndex(0) 
        self.stackedWidget.update()
    
    def Open_File_Pre(self, MainWindow):
        """
        打开文件对话框

        :return:
        """
        folderDir_pre = None
        folderDir_pre = QtWidgets.QFileDialog.getExistingDirectory(
            MainWindow, '选取文件夹', "./")  # 打开文件夹选择对话框
        if folderDir_pre == "":
            pass  # 防止未选择文件或者关闭对话框程序闪退
        else:

            # os.listdir读取文件夹目录的所有文件，并返回文件名列表
            AllFileList = os.listdir(folderDir_pre)
            AllFileList.sort(key=lambda x: int(x[-10:-4]))
            self.absolute_FileList_pre = []
            FileNameList_pre = []
            for FileName in AllFileList:
                absolutePath = os.path.join(folderDir_pre, FileName)  # 拼接成绝对路径
                # 判断对象是否为文件，传入的参数必须是绝对路径，而os.listdir()获得的是文件名，需要join拼接成绝对路径，
                if os.path.isfile(absolutePath):
                    # os.path.splitext（）分离文件名和后缀，返回元组
                    if os.path.splitext(FileName)[1] == '.jpg' or '.png' or '.BMP':
                        FileNameList_pre.append(FileName)  # 文件名列表
                        self.absolute_FileList_pre.append(
                            absolutePath)  # 绝对路径文件列表

            # 清空当前全部窗口
            # TODO  删除page的索引问题
            total_num = self.stackedWidget.count()
            for i in range(total_num - 1,-1,-1): # 倒序循环
                page_widget = self.stackedWidget.widget(i)
                self.stackedWidget.removeWidget(page_widget)
            self.stackedWidget.update()
    

            # 构建窗体，并显示图像
            for i in range(len(self.absolute_FileList_pre)):
                page_widget = QtWidgets.QWidget()
                page_layout = QtWidgets.QHBoxLayout(page_widget)
                page_layout.setObjectName("page_layout"+str(i))
                label_pre_img = QtWidgets.QLabel(page_widget)  # 用label显示图像
                label_pre_img.setObjectName("label_img_pre"+str(i))
                pix = QtGui.QPixmap(self.absolute_FileList_pre[i])
                label_pre_img.setPixmap(pix)
                label_pre_img.setScaledContents(False)  # 自适应QLabel大小
                page_layout.addWidget(label_pre_img)

                self.stackedWidget.addWidget(page_widget)

    def Action_next_page(self):
        """下一张"""
        now_index = self.stackedWidget.currentIndex()
        total_num = self.stackedWidget.count()
        if now_index == total_num:  # 最后一张
            self.statusbar.showMessage("已经是最后一张")
            self.label_now_img_id.setText(
                "当前切片：" + str(now_index) + '/' + str(total_num))

        else:
            self.stackedWidget.setCurrentIndex(now_index + 1)
            self.label_now_img_id.setText(
                "当前切片：" + str(now_index) + '/' + str(total_num))

    def Action_pre_page(self):
        """上一张"""
        now_index = self.stackedWidget.currentIndex()
        total_num = self.stackedWidget.count()
        if now_index == 0:  # 一张
            self.statusbar.showMessage("已经是第一张")
            self.label_now_img_id.setText(
                "当前切片：" + str(now_index) + '/' + str(total_num))

        else:
            self.stackedWidget.setCurrentIndex(now_index - 1)
            self.label_now_img_id.setText(
                "当前切片：" + str(now_index) + '/' + str(total_num))

    def Action_Load_model(self, MainWindow):
        """载入深度学习模型"""
        try:
            weight_path = None
            weight_path, _ = QtWidgets.QFileDialog.getOpenFileName(
                MainWindow, '选取文件夹', "./")
            if weight_path != None:
                self.model = UNET(model_path=weight_path,
                                  cuda=self.checkBox.isChecked())  # 创建预测模型
                self.statusbar.showMessage("载入UNet模型成功！")
                self.label_weight_path.setText("权重路径：" + weight_path)
            else:
                msg_box = QtWidgets.QMessageBox(
                    QtWidgets.QMessageBox.warning, '提示', '请载入模型权重！')
                msg_box.exec_()

        except:
            self.statusbar.showMessage("载入UNet模型出错！")

    def Action_Seg_rocks(self):
        """分割图像,创建线程"""
        self.thread = Runthread()  # 创建线程
        self.thread._signal.connect(self.seg_rocks)  # 连接信号
        self.thread.start()  # 开始线程

    def seg_rocks(self):
        """使用UNet分割图像"""
        self.r_imgs = []
        # 先清除临时存放文件夹的内容
        import shutil
        shutil.rmtree('./tmp_results')
        os.mkdir('./tmp_results')
        # 传入模型，进行预测
        for i in trange(len(self.absolute_FileList_pre)):
            rock_img = Image.open(self.absolute_FileList_pre[i])
            r_img, binary_img, gray_img = self.model.detect_image(rock_img)
            self.r_imgs.append(r_img)

            # 存放到临时文件夹
            # TODO：解决模型分割结果需存放临时文件的问题
            r_img.save("./tmp_results/" + str(i) + ".png")

        for i in range(len(self.absolute_FileList_pre)):
            # 找到stackedwidget中的reviseform组件，即找子组件
            page_layout = self.stackedWidget.widget(i).findChild(
                QtWidgets.QHBoxLayout, "page_layout"+str(i))
            reviseForm = ReviseForm(self.stackedWidget.widget(i), self)
            reviseForm.setObjectName("ReviseForm"+str(i))
            page_layout.addWidget(reviseForm)
            # pixmap载入分割好的图像
            reviseForm.pix.load("./tmp_results/" + str(i) + ".png")
            self.stackedWidget.update()

    def Action_open_seged_imgs(self, MainWindow):
        """"打开分割后图片"""
        folderDir_seged = None
        folderDir_seged = QtWidgets.QFileDialog.getExistingDirectory(
            MainWindow, '选取文件夹', "./")  # 打开文件夹选择对话框
        if folderDir_seged == "":
            pass  # 防止未选择文件或者关闭对话框程序闪退
        else:

            # os.listdir读取文件夹目录的所有文件，并返回文件名列表
            AllFileList = os.listdir(folderDir_seged)
            AllFileList.sort(key=lambda x: int(x[-10:-4]))
            self.absolute_FileList_seged = []
            FileNameList_pre = []
            for FileName in AllFileList:
                absolutePath = os.path.join(
                    folderDir_seged, FileName)  # 拼接成绝对路径
                # 判断对象是否为文件，传入的参数必须是绝对路径，而os.listdir()获得的是文件名，需要join拼接成绝对路径，
                if os.path.isfile(absolutePath):
                    # os.path.splitext（）分离文件名和后缀，返回元组
                    if os.path.splitext(FileName)[1] == '.jpg' or '.png' or '.BMP':
                        FileNameList_pre.append(FileName)  # 文件名列表
                        self.absolute_FileList_seged.append(
                            absolutePath)  # 绝对路径文件列表

            # 将分割后图片展示在窗口中，便于修改

            for i in range(len(self.absolute_FileList_seged)):
                # 如果此时stackedwidget没有相应的子窗体
                if self.stackedWidget.widget(i) == None:
                    page_widget = QtWidgets.QWidget()
                    page_layout = QtWidgets.QHBoxLayout(page_widget)
                    page_layout.setObjectName("page_layout"+str(i))
                    reviseForm = ReviseForm(self.stackedWidget.widget(i), self)
                    reviseForm.setObjectName("ReviseForm"+str(i))
                    # 添加结果展示组件
                    page_layout.addWidget(reviseForm)
                    reviseForm.pix.load(self.absolute_FileList_seged[i])

                    self.stackedWidget.addWidget(page_widget)
                # 对应的子窗体存在并且没有结果展示组件，需创建
                elif self.stackedWidget.widget(i).findChild(ReviseForm, "ReviseForm"+str(i)) == None:
                    page_layout = self.stackedWidget.widget(i).findChild(
                        QtWidgets.QHBoxLayout, "page_layout"+str(i))
                    reviseForm = ReviseForm(self.stackedWidget.widget(i), self)
                    reviseForm.setObjectName("ReviseForm"+str(i))
                    page_layout.addWidget(reviseForm)
                    reviseForm.pix.load(self.absolute_FileList_seged[i])
                else:
                    self.stackedWidget.widget(i).findChild(
                        ReviseForm, "ReviseForm"+str(i)).pix.load(self.absolute_FileList_seged[i])

    def Action_save_imgs(self, MainWindow):
        """保存完善好的的图像"""
        try:
            folderDir_save = None
            folderDir_save = QtWidgets.QFileDialog.getExistingDirectory(
                MainWindow, "保存于", "./")
            for i in range(len(self.absolute_FileList_pre)):
                self.stackedWidget.widget(i).findChild(
                    ReviseForm, "ReviseForm"+str(i)).pix.save(folderDir_save+'/'+str(i)+".png")
            self.statusbar.showMessage("保存成功！")
        except:
            self.statusbar.showMessage("保存失败！")

    def Action_VisualModel(self, MainWindow):
        """三维重建"""
        """try:"""
        self.VisualModelWidget = VisualModelWidget(
            MainWindow, self)  # 创建一个子窗口
        self.VisualModelWidget.show()
        self.VisualModelWidget.Visual()
        """except:
            self.statusbar.showMessage("三维重建失败！")"""

    def Action_ResetImage(self):
        """重置当前图像"""
        now_index = self.stackedWidget.currentIndex()
        if self.stackedWidget.widget(now_index).findChild(ReviseForm, "ReviseForm"+str(now_index)) != None:
            self.stackedWidget.widget(now_index).findChild(
                ReviseForm, "ReviseForm"+str(now_index)).pix.load(self.absolute_FileList_seged[now_index])
        else:
            msg_box = QtWidgets.QMessageBox(
                QtWidgets.QMessageBox.warning, '提示', '重置失败！')
            msg_box.exec_()

    def Action_ChangedPenSize(self):
        """画笔粗细改变触发事件"""
        now_size = self.spinBox_pensize.value()  # 读取当前的粗细值
        for i in range(self.stackedWidget.count()):
            self.stackedWidget.widget(i).findChild(
                ReviseForm, "ReviseForm"+str(i)).penSize = now_size

    def Action_save_to_vtk(self):
        """输出为vtk文件"""
        # TODO
        pass


# 继承QThread
class Runthread(QtCore.QThread):
    # python3,pyqt5与之前的版本有些不一样
    #  通过类成员对象定义信号对象
    _signal = QtCore.pyqtSignal(str)

    def __init__(self):
        super(Runthread, self).__init__()

    def __del__(self):
        self.wait()

    def run(self):
        print("开始分割")
        self._signal.emit("run 666")  # 信号发送
